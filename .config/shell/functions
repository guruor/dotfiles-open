#!/bin/bash

# sudo() {
    # Enables touch id for sudo on mac
    # unset -f sudo
    # if [[ "$(uname)" == 'Darwin' ]] && ! grep 'pam_tid.so' /etc/pam.d/sudo --silent; then
      # sudo sed -i -e '1s;^;auth       sufficient     pam_tid.so\n;' /etc/pam.d/sudo
    # fi
    # sudo "$@"
# }

# Add global functions here
function docker_ip() {
    container_name=$1
    docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $container_name
}


function is_docker_container_running() {
    compose_file="$1"
    service_name="$2"

    # container_name=$(get_docker_container_name_by_service "$compose_file" "$service_name")
    # [[ $(docker container ls --filter="name=\"${container_name}\"" --format="{{.Names}}") = "$container_name" ]]
    [[ $(docker compose -f "$compose_file" ps --services | grep "$service_name") = "$service_name" ]]
}

function get_docker_project_name() {
    compose_file="$1"

    project_dir=$(dirname "${compose_file}")
    project_name=$(basename "${project_dir}")
    print "$project_name"
}

function get_docker_container_name_by_service() {
    compose_file="$1"
    service_name="$2"

    project_name=$(get_docker_project_name "$compose_file")
    container_name="${project_name}-${service_name}-1"
    print "$container_name"
}


function docker_start_service() {
    # Here profile name is same as service name
    compose_file="$1"
    service_name="$2"
    compose_profiles="$3"

    if is_docker_container_running "$compose_file" "$service_name"; then
        echo -e "Service ${service_name} is already running"
    else
        echo -e "Starting service ${service_name}..."
        # COMPOSE_PROFILES="$compose_profiles" docker compose -f "$compose_file"  up -d
        docker compose -f "$compose_file"  restart "$service_name"
    fi
}

function docker_copy_tag() {
    # When you have multiple tag available for same image,
    # you can choose the image first and then choose one tag to be used as `$new_tag`, which is by default latest
    new_tag="${1:-latest}"

    # Selecting image and tag to be copied
    image_name=$(docker image ls --filter="dangling=false" --format="{{ .Repository }}" | uniq | fzf)
    tag=$(docker image ls --format="{{ .Tag }}" "$image_name" | fzf)

    # Making the copy
    docker tag "$image_name":"$tag" "$image_name":"$new_tag"
    echo -e "\nCopying \`${image_name}:${tag}\` as \`${new_tag}\` image\n"
    docker image ls --filter="dangling=false" "$image_name"
}

function dctagc(){
    # Alias function for docker_copy_tag
    docker_copy_tag "$@"
}

function switch_iterm2_profile() {
    # Iterm allows switching profile with this escape sequence
    echo -ne "\033]50;SetProfile=$1\a"
}

[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/functions-private" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/functions-private"

function urldecode(){
    decoded_value=$(python3 -c "import sys, urllib.parse as ul; \
        print(ul.unquote_plus(sys.argv[1]))" $1)
    echo "${decoded_value}"
}

function urlencode(){
    encoded_value=$(python3 -c "import sys, urllib.parse as ul; \
        print (ul.quote_plus(sys.argv[1]))" $1)
    echo "${encoded_value}"
}

function get_colors() {
    curl -s https://gist.githubusercontent.com/HaleTom/89ffe32783f89f403bba96bd7bcd1263/raw/e50a28ec54188d2413518788de6c6367ffcea4f7/print256colours.sh | bash
}

function truecolors_test(){
    width=$1
    awk -v term_cols="${width:-$(tput cols || echo 80)}" -v term_lines="${height:-1}" 'BEGIN{
        s="/\\";
        total_cols=term_cols*term_lines;
        for (colnum = 0; colnum<total_cols; colnum++) {
            r = 255-(colnum*255/total_cols);
            g = (colnum*510/total_cols);
            b = (colnum*255/total_cols);
            if (g>255) g = 510-g;
            printf "\033[48;2;%d;%d;%dm", r,g,b;
            printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
            printf "%s\033[0m", substr(s,colnum%2+1,1);
            if (colnum%term_cols==term_cols) printf "\n";
        }
        printf "\n";
    }'
}

function pyright_venv_setup() {
  # Check if Python is available
  if ! command -v python &> /dev/null; then
    echo "Error: Python is not available. Please ensure Python is installed and in your PATH."
    return 1
  fi

  # Attempt to detect the virtual environment
  venv_dir=$(python -c "import sys; print(sys.prefix)")

  # Check if no virtual environment is detected
  if [ -z "$venv_dir" ] || [ "$venv_dir" = "$(python -c 'import os; print(os.sep.join(os.__file__.split(os.sep)[:-2]))')" ]; then
    echo "Error: No virtual environment detected. Please activate your virtual environment."
    return 1
  fi

  # Extract the path and name of the virtual environment
  venv_path="$(dirname "$venv_dir")"
  venv_name="$(basename "$venv_dir")"

  echo "Detected virtual environment:"
  echo "  Path: $venv_path"
  echo "  Name: $venv_name"

  # Display current Pyright configuration if it exists
  if [[ -f pyrightconfig.json ]]; then
    echo "\nExisting pyrightconfig.json:"
    cat pyrightconfig.json
  else
    echo "No existing pyrightconfig.json found."
  fi

  # Create a new Pyright configuration
  printf '{\n  "venvPath": "%s",\n  "venv": "%s"\n}\n' "$venv_path" "$venv_name" > pyrightconfig.json

  echo "\nUpdated pyrightconfig.json:"
  cat pyrightconfig.json
}

function bwu() {
    BW_STATUS=$(bw status | jq -r .status)
    case "$BW_STATUS" in
    "unauthenticated")
        echo "Logging into BitWarden"
        export BW_SESSION=$(bw login --raw)
        ;;
    "locked")
        echo "Unlocking Vault"
        export BW_SESSION=$(bw unlock --raw)
        ;;
    "unlocked")
        echo "Vault is unlocked"
        ;;
    *)
        echo "Unknown Login Status: $BW_STATUS"
        return 1
        ;;
    esac
    bw sync
}
