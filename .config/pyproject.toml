[tool.basedpyright]
typeCheckingMode = "standard"            # Possible values ["off", "basic", "standard", "strict"]
reportArgumentType = false

[tool.pyright]
include = ["src"]
exclude = [
  "**/node_modules",
  "**/__pycache__",
  "src/experimental",
  "src/typestubs",
]
ignore = ["src/oldstuff"]
stubPath = "src/stubs"
# Use below command to generate pyrightconfig.json with venvPath anv venv to be used, same is added in bash functions: pyright_venv_setup
# python -c "import sys; print(sys.prefix)" | read -r d; printf '{\n  "venvPath": "%s",\n  "venv": "%s"\n}\n' "$(dirname "$d")" "$(basename "$d")" > pyrightconfig.json
venvPath = "."
venv = ".venv"

# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#type-check-diagnostics-settings
# Default values for these rules: https://github.com/microsoft/pyright/blob/main/docs/configuration.md#diagnostic-rule-defaults
# Enable below carefully, the more rules we enable the more CPU utilization will happen for pyright node service,
# Neovim will also consume the CPU when rendering those messages
typeCheckingMode = "standard"            # Possible values ["off", "basic", "standard", "strict"]
reportArgumentType = false
reportGeneralTypeIssues = "warning"
reportPropertyTypeMismatch = "warning"
# reportUnknownVariableType = "information"
# reportUnknownParameterType = "information"
# reportUnknownArgumentType = "information"
# reportUnknownMemberType = "information"
# reportOptionalMemberAccess = "information"
# reportFunctionMemberAccess = "information"
useLibraryCodeForTypes = true

# Disabling linter and formatting features, will be convered by ruff
reportMissingImports = "none"
reportMissingTypeStubs = "none"
reportMissingModuleSource = "none"
reportUndefinedVariable = "none"
disableLanguageServices = true
disableOrganizeImports = true

pythonVersion = "3.16"
pythonPlatform = "Linux"

executionEnvironments = [{ root = "src" }]

# [tool.pylint]
# extend-ignore = "E0101,E0213,E1101,E1102,E1111,E1136,C0103,C0114,C0115,C0116,C0202,C0415,W0105,W0212,W0613,W0622,R0903,R0913,R1720"
# max-line-length = 120
#
#
# [tool.autopep8]
# max-line-length = 120
# ignore = "E0101,E0213,E1101,E1102,E1111,E1136,C0103,C0114,C0115,C0116,C0202,C0415,W0105,W0212,W0613,W0622,R0903,R0913,R1720,F541"
# aggressive = 2
#
# [tool.black]
# line-length = 120
# include = '\.pyi?$'
# extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
# ^/foo.py  # exclude a file named foo.py in the root of the project (in addition to the defaults)
# '''
# target-version = ['py37']

[tool.ruff]
line-length = 120
show-fixes = true
fix = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
# select = ["E4", "E7", "E9", "F", "B", "Q"] # Default
# Available rules: https://docs.astral.sh/ruff/rules/
select = ["ALL"]
# Extent existing select with isort
extend-select = ["I"]

[tool.ruff.lint.isort]
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "testing",
  "local-folder",
]
lines-after-imports = 2
combine-as-imports = true

[tool.ruff.pydocstyle]
convention = "google" # Accepts: "google", "numpy", or "pep257".
