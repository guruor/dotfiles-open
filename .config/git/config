[alias]
    a = add
    aa = add -A
    b = branch --sort=-committerdate
    ba = branch -a --sort=-committerdate
    bf = !git branch --color=always --sort=-committerdate -vv | grep -v '/HEAD\\s'  | fzf --ansi | sed 's/^..//' | awk '{print $1}' | sed "s#^remotes/[^/]*/##"
    bfd = !git bf | xargs git branch -D
    bfc = !git bf | cb
    bccib = "!zsh -c \"source $HOME/.config/zsh/.zshrc; create_git_branches $1 stage uat master pre-prod;\""
    c = commit -m
    ca = commit -am
    co = checkout
    # git checkout fzf
    cof = !git branch --color=always --sort=-committerdate | grep -v '/HEAD\\s'  | fzf --ansi | sed 's/^..//' | awk '{print $1}' | sed "s#^remotes/[^/]*/##" | xargs git checkout
    # git checkout fzf with last commit details
	cofv = !git branch --color=always --sort=-committerdate -vv | grep -v '/HEAD\\s'  | fzf --ansi | sed 's/^..//' | awk '{print $1}' | sed "s#^remotes/[^/]*/##" | xargs git checkout
    contributors = shortlog -nse --all
    d = diff --patch-with-stat
    df = diff --patch-with-stat --color-words
    ds = diff --patch-with-stat --staged
    dt = difftool
    dts = difftool --staged
    # Save diff patch by name
    dfs-named="!zsh -c \"source $HOME/.config/zsh/.zshrc; devfilemanager save_diff $1\""
    # Apply diff patch by name
    ; dfa-named="!f() { git apply .patches/$1.patch --reject --whitespace=fix; git s; }; f"
    dfa-named="!f() { git apply .patches/$1.patch; git s; }; f"

    # Save diff patch for dev_changes
    dfs="!git dfs-named dev_changes"
    # Apply diff patch for dev_changes
    dfa="!git dfa-named dev_changes"

    fc = "!f() { git log --pretty='%C(yellow)%h%Creset -%Cred%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' --grep=$1; }; f"
    fs = "!f() { git log --pretty='%C(yellow)%h%Creset -%Cred%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset' -S$1; }; f"
    lg = log --graph --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'
    l1 = log --all --date=short --color=always --format='%C(green)%ad %C(auto)%h %C(blue)%<(15,trunc)%an %C(auto)%<(65,trunc)%s%d%C(reset)'
    # Pick commits from log with fzf
    logf = "!f() { git l1 \"${1:-.}\" | fzf --ansi --multi | cut -d' ' -f2; }; f"
    logfc = "!git logf | cb"
    # Searches a change in commit history of the branch
    search = "!f() { git log -S \"$1\"; }; f"
    # Cherry pick selected commit with fzf
    cpf = "!git logf | xargs git cherry-pick"
    p = push
    P = pull
    pull-dir = "!find . -mindepth 1 -maxdepth 1 -type d -print -exec git -C {} pull \\;"
    remotes = remote -v
    s = status -sb
    sclone = clone --depth 1
    rs = reset HEAD~1
    rsh = reset --hard
    undo = rs
    st = stash
    stl = stash list
    stp = stash push -m
    stpop = stash pop
    st-staged =stash -- $(git diff --staged --name-only)
    st-staged-message = "!f() { git stash -m \"$1\" -- $(git diff --staged --name-only); }; f"
    st-but-keep-staged = stash --keep-index
    st-show-no-color = stash show -p --color=never
    # Save stash by name
    sts-named="!f() { git stash push -m "named_stash_$1"; }; f"
    # Get stash by name
    stg-named="!f() { git stash list | grep -m 1 "named_stash_$1" | cut -d: -f1; }; f"
    # Apply saved stash by name
    sta-named="!f() { stash_name=$(git stg-named "$1"); [[ "${stash_name}" ]] && git stash apply "${stash_name}"; }; f"
    # Drop saved stash by name
    std-named="!f() { stash_name=$(git stg-named "$1"); [[ "${stash_name}" ]] && git stash drop "${stash_name}"; }; f"
    # Replace saved stash by name
    str-named="!f() { git std-named "$1"; git sts-named "$1"; }; f"

    # Stash save dev changes
    sts="!f() { git sts-named dev_changes; }; f"
    # Stash apply dev changes
    sta="!f() { git sta-named dev_changes; }; f"
    # Stash drop dev changes
    std="!f() { git std-named dev_changes; }; f"
    # Stash replace (drop and save) dev changes
    str="!f() { git std; git sts; }; f"

[core]
    editor = vim
    autocrlf = false
    excludesfile = ~/.config/git/ignore
    pager = delta

[delta]
    features = gruvmax-fang
    paging = always
    tabs = 4
    navigate = true    # use n and N to move between diff sections
    # side-by-side = true # Keep commented so the gdd and gdds aliases work

[interactive]
    diffFilter = delta --color-only

[diff]
    colorMoved = default

[pager]
    diff = delta
    show = delta

[push]
    default = simple
    autoSetupRemote = true

[merge]
    tool = vimdiff
    conflictstyle = diff3

[mergetool "vimdiff"]
  cmd = nvim -f -c \"Gdiffsplit!\" \"$MERGED\"

[mergetool]
  prompt = false

[commit]
    gpgSign = false

[color]
    ui = always
    diff = always

[color "diff"]
    meta = yellow bold
    commit = cyan bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "status"]
    added = green
    changed = yellow
    untracked = red

[credential]
    helper = store

[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "gh:"

[url "git@gist.github.com:"]
    insteadOf = "gist:"
    pushInsteadOf = "gist:"

[url "git@gitlab.com:"]
    insteadOf = "gl:"
    pushInsteadOf = "gl:"
[pull]
    ; ff = only
    rebase = false

[include]
  path = ~/.config/git/config-private
  path = ~/.config/delta/themes.gitconfig

[includeIf "gitdir:~/WorkSpaces/REA/"]
  path = ~/.config/git/config-private-rea
