#!/bin/bash
#
# Open new terminal window with a program and specific title
# Kind of wrapper over terminals like kitty, ghostty, alacritty, and wezterm

# Function to display usage information
usage() {
        echo "Usage: $0 [--title <title>] [--shell <shell>] [--cmd-str <command>] [--terminal <terminal>] [--debug]"
        echo "Options:"
        echo "  --title <title>                 Set the title for the terminal window"
        echo "  --shell <shell>                 Specify the shell to execute"
        echo "  --cmd-str <command>             Specify the command to execute"
        echo "  --working-directory <command>   Specify the default path for the terminal"
        echo "  --terminal <terminal>           New window will be created in this terminal"
        echo "  --debug                         Enable debug mode and log output to a file"
        exit 1
}

# Default values
TERMINAL="${TERMINAL:-kitty}"
WIN_TITLE="New window"
DEFAULT_SHELL="$SHELL"
CMD_STR="$SHELL"
WORKING_DIR="$HOME"
DEBUG=false
LOG_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/openterm"
LOG_FILE="$LOG_DIR/openterm.log"

# Parse command line options
while [[ $# -gt 0 ]]; do
        case "$1" in
        --title)
                WIN_TITLE="$2"
                shift 2
                ;;
        --shell)
                DEFAULT_SHELL="$2"
                shift 2
                ;;
        --cmd-str)
                CMD_STR="$2"
                shift 2
                ;;
        --working-directory)
                WORKING_DIR="$2"
                shift 2
                ;;
        --terminal)
                TERMINAL="$2"
                shift 2
                ;;
        --debug)
                DEBUG=true
                shift
                ;;
        *)
                echo "Error: Unknown option: $1"
                usage
                ;;
        esac
done

# Function to log messages
log_message() {
        local message="$1"
        local params="${@:2}"
        if [ "$DEBUG" = true ]; then
                mkdir -p "$LOG_DIR"
                echo "$(date +'%Y-%m-%d %H:%M:%S') - $message - Parameters: $params" >>"$LOG_FILE"
        fi
}

# Check if mandatory options are provided
if [ -z "$WIN_TITLE" ] || [ -z "$DEFAULT_SHELL" ] || [ -z "$CMD_STR" ]; then
        echo "Error: Mandatory options missing."
        # Logging message for terminal emulator startup
        log_message "Input Error " "Terminal: $TERMINAL, Title: $WIN_TITLE, Shell: $DEFAULT_SHELL, Command: $CMD_STR"
        usage
fi

# Execute the command based on the selected terminal emulator
case "$TERMINAL" in
kitty)
        log_message "Starting kitty" "Terminal: $TERMINAL, Title: $WIN_TITLE, Shell: $DEFAULT_SHELL, Command: $CMD_STR"
        kitty --single-instance --title "$WIN_TITLE" --working-directory "$WORKING_DIR" -e "$DEFAULT_SHELL" -lc "$CMD_STR;"
        ;;

ghostty)
        log_message "Starting ghostty" "Terminal: $TERMINAL, Title: $WIN_TITLE, Shell: $DEFAULT_SHELL, Command: $CMD_STR"
        open -na ghostty --args --title="$WIN_TITLE" --working-directory="$WORKING_DIR" -e "$DEFAULT_SHELL" -lc \'"$CMD_STR;"\'
        ;;
alacritty)
        log_message "Starting alacritty" "Terminal: $TERMINAL, Title: $WIN_TITLE, Shell: $DEFAULT_SHELL, Command: $CMD_STR"
        # Check if an Alacritty window with the specified title exists
        window_exists=$(pgrep "$TERMINAL")
        if [ -n "$window_exists" ]; then
                # Alacritty window exists, so creating a window in the same session
                log_message "Creating new alacritty to existing session" "window_exists: $window_exists"
                alacritty msg create-window --title "$WIN_TITLE" --working-directory "$WORKING_DIR" -e "$DEFAULT_SHELL" -lc "$CMD_STR;" &
        else
                # Alacritty window doesn't exist, creating a new session instance
                log_message "Starting new alacritty session" "window_exists: $window_exists"
                alacritty --title "$WIN_TITLE" --working-directory "$WORKING_DIR" -e "$DEFAULT_SHELL" -lc "$CMD_STR;" &
        fi
        ;;
wezterm)
        log_message "Starting wezterm" "Terminal: $TERMINAL, Title: $WIN_TITLE, Shell: $DEFAULT_SHELL, Command: $CMD_STR"
        # Check if a Wezterm window with the specified title exists
        window_exists=$(pgrep "wezterm-gui")
        if [ -n "$window_exists" ]; then
                # Wezterm window exists, so creating a window in the same session
                log_message "Creating new wezterm to existing session" "window_exists: $window_exists"
                wezterm cli spawn --cwd "$WORKING_DIR" --new-window -- "$DEFAULT_SHELL" -lc "$CMD_STR;" &
        else
                # Wezterm window doesn't exist, creating a new session instance
                log_message "Starting new wezterm session" "window_exists: $window_exists"
                wezterm start --cwd "$WORKING_DIR" -- "$DEFAULT_SHELL" -lc "$CMD_STR;" &
        fi
        sleep 2
        # Getting the latest window ID
        window_id=$(wezterm cli list --format json | jq 'sort_by(.window_id)' | jq '.[-1].window_id')
        if [ -n "$window_id" ]; then
          log_message "Setting title for wezterm window: $window_id"
          wezterm cli set-window-title --window-id "$window_id" "$WIN_TITLE"
          wezterm cli set-tab-title --tab-id "$window_id" "$WIN_TITLE"
        fi
        ;;
*)
        echo "Error: Unsupported terminal emulator: $TERMINAL"
        usage
        ;;
esac

# Logging message for terminal emulator startup
log_message "Started $TERMINAL"

# Keep the terminal open
# read -rp "Press Enter to exit..."
